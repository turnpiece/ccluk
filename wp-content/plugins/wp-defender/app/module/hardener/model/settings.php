<?php
/**
 * Author: Hoang Ngo
 */

namespace WP_Defender\Module\Hardener\Model;

use Hammer\Helper\WP_Helper;
use WP_Defender\Behavior\Utils;
use WP_Defender\Module\Hardener\Component\Change_Admin;
use WP_Defender\Module\Hardener\Component\DB_Prefix;
use WP_Defender\Module\Hardener\Component\Disable_File_Editor;
use WP_Defender\Module\Hardener\Component\Disable_Trackback;
use WP_Defender\Module\Hardener\Component\Disable_Xml_Rpc;
use WP_Defender\Module\Hardener\Component\Hide_Error;
use WP_Defender\Module\Hardener\Component\Login_Duration;
use WP_Defender\Module\Hardener\Component\PHP_Version;
use WP_Defender\Module\Hardener\Component\Prevent_Enum_Users;
use WP_Defender\Module\Hardener\Component\Prevent_Php;
use WP_Defender\Module\Hardener\Component\Protect_Information;
use WP_Defender\Module\Hardener\Component\Security_Key;
use WP_Defender\Module\Hardener\Component\Sh_Content_Security;
use WP_Defender\Module\Hardener\Component\Sh_Content_Type_Options;
use WP_Defender\Module\Hardener\Component\Sh_Feature_Policy;
use WP_Defender\Module\Hardener\Component\Sh_Referrer_Policy;
use WP_Defender\Module\Hardener\Component\Sh_Strict_Transport;
use WP_Defender\Module\Hardener\Component\Sh_X_Frame;
use WP_Defender\Module\Hardener\Component\Sh_XSS_Protection;
use WP_Defender\Module\Hardener\Component\WP_Rest_Api;
use WP_Defender\Module\Hardener\Component\WP_Version;
use WP_Defender\Module\Hardener\Rule;

class Settings extends \Hammer\WP\Settings {
	private static $_instance;
	/**
	 * @var string
	 */
	public $id = 'hardener_settings';
	/**
	 * Contains issues rules
	 *
	 * @var array
	 */
	public $issues = array();

	/**
	 * Contains fixed rules
	 * @var array
	 */

	public $fixed = array();

	/**
	 * Contains ignored issue
	 * @var array
	 */
	public $ignore = array();

	/**
	 * Store the last status check, we will check & fetch the status intervally, this can reduce load time.
	 * @var null
	 */
	public $last_status_check = null;

	/**
	 * Toggle notification
	 * @var bool
	 */
	public $notification = true;
	/**
	 * @var bool
	 */
	public $notification_repeat = false;

	/**
	 * Holding recipients info
	 * @var array
	 */
	public $receipts = array();

	/**
	 * Contains all the data generated by rules
	 * @var array
	 */
	public $data = array();

	/**
	 * Holding excluded file path info
	 * @var array
	 */
	public $exclude_file_paths = array();

	/**
	 * Holds new htconfig structure for defender
	 *
	 * @var array
	 */
	public $new_htconfig = array();

	/**
	 * Current active server
	 *
	 * @var String
	 */
	public $active_server = 'apache';

	/**
	 * Last time visit into the hardener page
	 *
	 * @var integer
	 */
	public $last_seen;

	/**
	 * Last notification sent out
	 *
	 * @var integer
	 */
	public $last_sent;

	/**
	 * @var string
	 */
	public $min_php_version = '';
	/**
	 * @var string
	 */
	public $stable_php_version = '';

	/**
	 * We have to flag if the db prefix changed by us or not
	 *
	 * @var bool
	 */
	public $is_prefix_changed = false;

	/**
	 * shorthand to add to a list
	 *
	 * @param $slug
	 * @param $devPush
	 */

	public function __construct( $id, $is_multi ) {
		if ( is_admin() || is_network_admin() && current_user_can( 'manage_options' ) ) {
			$user = wp_get_current_user();
			if ( is_object( $user ) ) {
				$this->receipts[] = array(
					'first_name' => $user->display_name,
					'email'      => $user->user_email
				);
			}
		}
		$this->active_server = Utils::instance()->determineServer();
		parent::__construct( $id, $is_multi );
		$this->notification = ! ! $this->notification;
		if ( ! is_array( $this->receipts ) ) {
			$this->receipts = [];
		}
		$this->receipts = array_values( $this->receipts );
	}

	/**
	 * @param $slug
	 * @param bool $devPush
	 */
	public function addToIssues( $slug, $devPush = true ) {
		$this->addToList( 'issues', $slug, $devPush );
	}

	/**
	 * shorthand to add to a list
	 *
	 * @param $slug
	 * @param $devPush
	 */
	public function addToIgnore( $slug, $devPush = true ) {
		$this->addToList( 'ignore', $slug, $devPush );
	}

	/**
	 * shorthand to add to a list
	 *
	 * @param $slug
	 * @param $devPush
	 */
	public function addToResolved( $slug, $devPush = true ) {
		$this->addToList( 'fixed', $slug, $devPush );
	}

	/**
	 * @param $list
	 * @param $slug
	 * @param $devPush
	 */
	private function addToList( $list, $slug, $devPush ) {
		$lists = array(
			'issues',
			'fixed',
			'ignore'
		);
		if ( ! in_array( $list, $lists ) ) {
			return;
		}

		//remove from lists
		foreach ( $lists as $l ) {
			if ( $l == $list ) {
				continue;
			}
			$key = array_search( $slug, $this->{$l} );
			if ( $key !== false ) {
				unset( $this->{$l}[ $key ] );
			}
		}

		array_push( $this->$list, $slug );
		$this->$list             = array_unique( $this->$list );
		$this->last_status_check = time();
		$this->save();
		if ( $devPush ) {
			Utils::instance()->submitStatsToDev();
		}
	}

	/**
	 * @return Settings
	 */
	public static function instance( $refresh = false ) {
		if ( $refresh == true ) {
			self::$_instance = null;
		}
		if ( is_null( self::$_instance ) ) {
			self::$_instance = new Settings( 'wd_hardener_settings', WP_Helper::is_network_activate( wp_defender()->plugin_slug ) );
		}

		return self::$_instance;
	}

	/**
	 * refresh rules status and store the index
	 */
	public function refreshStatus() {
		$definedRules = $this->getDefinedRules( true );
		$this->fixed  = array();
		$this->issues = array();
		foreach ( $definedRules as $rule ) {
			if ( empty( $rule::$slug ) || in_array( $rule::$slug, $this->ignore ) ) {
				//this rule ignored, no process
				continue;
			}
			if ( $rule->getService()->check() ) {
				$this->fixed[] = $rule::$slug;
			} else {
				$this->issues[] = $rule::$slug;
			}
		}
		$this->last_status_check = time();
		$this->save();
	}

	/**
	 * Get Issues tweaks as object
	 * @return Rule[]
	 */
	public function getIssues() {
		$rules  = $this->getDefinedRules( true );
		$issues = array();
		foreach ( $this->issues as $issue ) {
			if ( isset( $rules[ $issue ] ) ) {
				$issues[] = $rules[ $issue ];
			}
		}

		return $issues;
	}

	/**
	 * Filter the tweaks and return data as array
	 *
	 *
	 * @param $type
	 *
	 * @return array
	 */
	public function getTweaksAsArray( $type, $sort = false ) {
		$rules = $this->getDefinedRules( true );

		$arr  = $this->$type;
		$data = array();
		foreach ( $arr as $tweak ) {
			if ( isset( $rules[ $tweak ] ) ) {
				$curr                 = $rules[ $tweak ];
				$data[ $curr::$slug ] = array(
					'slug'          => $curr::$slug,
					'title'         => $curr->getTitle(),
					'errorReason'   => $curr->getErrorReason(),
					'successReason' => $curr->getSuccessReason(),
					'status'        => $type,
					'misc'          => $curr->getMiscData()
				);
			}
		}

		if ( $sort ) {
			ksort( $data );
		}

		return $data;
	}

	/**
	 * @return array
	 */
	public function getIgnore() {
		$rules  = $this->getDefinedRules( true );
		$issues = array();
		foreach ( $this->ignore as $issue ) {
			if ( isset( $rules[ $issue ] ) ) {
				$issues[] = $rules[ $issue ];
			}
		}

		return $issues;
	}

	/**
	 * @return Rule[]
	 */
	public function getFixed() {
		$rules  = $this->getDefinedRules( true );
		$issues = array();
		foreach ( $this->fixed as $issue ) {
			if ( isset( $rules[ $issue ] ) ) {
				$issues[] = $rules[ $issue ];
			}
		}

		return $issues;
	}

	/**
	 * @param $slug
	 *
	 * @return Rule
	 */
	public function getRuleBySlug( $slug ) {
		$rules = $this->getDefinedRules( true );
		if ( isset( $rules[ $slug ] ) ) {
			return $rules[ $slug ];
		}
	}

	/**
	 *
	 * @param bool $init
	 *
	 * @return array
	 */
	public function getDefinedRules( $init = false ) {
		return array(
			Disable_Trackback::$slug       => $init == true ? new Disable_Trackback() : Disable_Trackback::getClassName(),
			WP_Version::$slug              => $init == true ? new WP_Version() : WP_Version::getClassName(),
			PHP_Version::$slug             => $init == true ? new PHP_Version() : PHP_Version::getClassName(),
			Change_Admin::$slug            => $init == true ? new Change_Admin() : Change_Admin::getClassName(),
			DB_Prefix::$slug               => $init == true ? new DB_Prefix() : DB_Prefix::getClassName(),
			Disable_File_Editor::$slug     => $init == true ? new Disable_File_Editor() : Disable_File_Editor::getClassName(),
			Hide_Error::$slug              => $init == true ? new Hide_Error() : Hide_Error::getClassName(),
			Prevent_Enum_Users::$slug      => $init == true ? new Prevent_Enum_Users() : Prevent_Enum_Users::getClassName(),
			Security_Key::$slug            => $init == true ? new Security_Key() : Security_Key::getClassName(),
			Protect_Information::$slug     => $init == true ? new Protect_Information() : Protect_Information::getClassName(),
			Prevent_Php::$slug             => $init == true ? new Prevent_Php() : Prevent_Php::getClassName(),
			Login_Duration::$slug          => $init == true ? new Login_Duration() : Login_Duration::getClassName(),
			Disable_Xml_Rpc::$slug         => $init == true ? new Disable_Xml_Rpc() : Disable_Xml_Rpc::getClassName(),
			//WP_Rest_Api::$slug             => $init == true ? new WP_Rest_Api() : WP_Rest_Api::getClassName(),
			//============SECURITY HEADERS===================
			Sh_X_Frame::$slug              => $init == true ? new Sh_X_Frame() : Sh_X_Frame::getClassName(),
			Sh_XSS_Protection::$slug       => $init == true ? new Sh_XSS_Protection() : Sh_XSS_Protection::getClassName(),
			Sh_Feature_Policy::$slug       => $init == true ? new Sh_Feature_Policy() : Sh_Feature_Policy::getClassName(),
			Sh_Referrer_Policy::$slug      => $init == true ? new Sh_Referrer_Policy() : Sh_Referrer_Policy::getClassName(),
			Sh_Strict_Transport::$slug     => $init == true ? new Sh_Strict_Transport() : Sh_Strict_Transport::getClassName(),
			Sh_Content_Type_Options::$slug => $init == true ? new Sh_Content_Type_Options() : Sh_Content_Type_Options::getClassName(),
			//Sh_Content_Security::$slug     => $init == true ? new Sh_Content_Security() : Sh_Content_Security::getClassName(),
		);
	}

	/**
	 * @param $key
	 *
	 * @return mixed
	 */
	public function getDValues( $key ) {
		if ( is_array( $this->data ) && isset( $this->data[ $key ] ) ) {
			return $this->data[ $key ];
		}

		return null;
	}

	/**
	 * @param $key
	 * @param $value
	 */
	public function setDValues( $key, $value ) {
		if ( $value == null ) {
			unset( $this->data[ $key ] );
		} else {
			$this->data[ $key ] = $value;
		}
		$this->save();
	}

	/**
	 * Save the exclude file paths
	 *
	 * @param Array - $paths
	 */
	public function saveExcludedFilePaths( $paths = array() ) {
		$this->exclude_file_paths = $paths;
	}

	/**
	 * Save the htconfig
	 *
	 * @param Array - $config
	 */
	public function saveNewHtConfig( $config = array() ) {
		$this->new_htconfig = $config;
	}

	/**
	 * Get the exclude file paths
	 *
	 * @return Array - $paths
	 */
	public function getExcludedFilePaths() {
		return $this->exclude_file_paths;
	}

	/**
	 * Get the new htconfig
	 *
	 * @return Array - $paths
	 */
	public function getNewHtConfig() {
		return $this->new_htconfig;
	}

	/**
	 * Set the active server
	 *
	 * @param String $server
	 */
	public function setActiveServer( $server ) {
		$this->active_server = $server;
	}

	/**
	 * @return array
	 */
	public function events() {
		return array(
			self::EVENT_BEFORE_SAVE => array(
				array(
					function () {
						//need to turn off notification or report off if no recipients
						if ( empty( $this->receipts ) ) {
							$this->notification = false;
						}
						//sanitize
						foreach ( $this->receipts as $key => &$receipt ) {
							$receipt = array_map( 'sanitize_text_field', $receipt );
							if ( ! filter_var( $receipt['email'], FILTER_VALIDATE_EMAIL ) ) {
								unset( $this->receipts[ $key ] );
							}
						}
					}
				)
			)
		);
	}

	/**
	 * Define labels for settings key, we will use it for HUB
	 *
	 * @param null $key
	 *
	 * @return array|mixed
	 */
	public function labels( $key = null ) {
		$labels = [
			'notification'        => __( 'Notification', wp_defender()->domain ),
			'receipts'            => __( 'Recipients', wp_defender()->domain ),
			'notification_repeat' => __( "Send reminders", wp_defender()->domain )
		];

		if ( $key != null ) {
			return isset( $labels[ $key ] ) ? $labels[ $key ] : null;
		}

		return $labels;
	}

	public function resolve( $rules ) {
		if ( $rules == true ) {
			$rules = $this->getDefinedRules( true );
		}
		foreach ( $rules as $key => $rule ) {
			$rule->process();
		}
	}
}