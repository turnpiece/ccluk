webpackHotUpdate("settings",{

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/module/settings/screen/configs.vue?vue&type=script&lang=js&":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/module/settings/screen/configs.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helper_base_hepler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../helper/base_hepler */ \"./src/helper/base_hepler.js\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  mixins: [_helper_base_hepler__WEBPACK_IMPORTED_MODULE_0__[\"default\"]],\n  name: \"configs\",\n  data: function data() {\n    return {\n      is_free: defender.is_free,\n      endpoints: wdSettings.endpoints,\n      nonces: wdSettings.nonces,\n      configs: wdSettings.configs,\n      config_name: '',\n      config_description: '',\n      new_config_name: '',\n      new_config_description: '',\n      current_config: '',\n      uploading: false,\n      file_upload: '',\n      state: {\n        on_saving: false\n      },\n      is_shown: 'no',\n      textCancel: '',\n      textClose: ''\n    };\n  },\n  created: function created() {\n    this.textCancel = this.__('Cancel');\n    this.textClose = this.__('Close this dialog.');\n  },\n\n  methods: {\n    apply_config: function apply_config() {\n      console.log('apply_config');\n      var self = this;\n      this.httpPostRequest('applyConfig', {\n        key: self.current_config\n      }, function (response) {\n        if (response.success === true) {\n          if (response.data.login_url !== undefined) {\n            setTimeout(function () {\n              location.href = response.data.login_url;\n            }, 2000);\n          } else {\n            self.configs = response.data.configs;\n            self.$nextTick(function () {\n              self.rebindSUI();\n              self.config_name = '';\n              self.config_description = '';\n              SUI.closeModal();\n            });\n          }\n        }\n      });\n    },\n    new_config: function new_config() {\n      var self = this;\n      this.httpPostRequest('newConfig', {\n        name: self.config_name,\n        desc: self.config_description\n      }, function (response) {\n        if (response.success === true) {\n          self.configs = response.data.configs;\n          self.$nextTick(function () {\n            self.rebindSUI();\n            self.config_name = '';\n            self.config_description = '';\n            SUI.closeModal();\n          });\n        }\n      });\n    },\n    rename_config: function rename_config() {\n      var self = this;\n      this.httpPostRequest('updateConfig', {\n        key: self.current_config,\n        name: self.new_config_name,\n        description: self.new_config_description\n      }, function (response) {\n        if (response.success === true) {\n          self.configs = response.data.configs;\n          self.$nextTick(function () {\n            SUI.closeModal();\n          });\n        }\n      });\n    },\n    delete_config: function delete_config() {\n      var self = this;\n      this.httpPostRequest('deleteConfig', {\n        key: self.current_config\n      }, function (response) {\n        if (response.success === true) {\n          self.configs = response.data.configs;\n          self.$nextTick(function () {\n            SUI.closeModal();\n          });\n        }\n      });\n    },\n    import_config: function import_config() {\n      var file = this.$refs.file.files[0];\n      var self = this;\n      if (file.type === \"application/json\") {\n        var formData = new FormData();\n        formData.append('file', file);\n        jQuery.ajax({\n          url: ajaxurl + '?action=' + this.endpoints['importConfig'] + '&_wpnonce=' + this.nonces['importConfig'],\n          type: \"POST\",\n          data: formData,\n          cache: false,\n          contentType: false,\n          processData: false,\n          beforeSend: function beforeSend(jqXHR, settings) {\n            self.state.on_saving = true;\n          },\n\n          success: function success(response) {\n            if (response.success === true) {\n              Defender.showNotification('success', response.data.message);\n              self.configs = response.data.configs;\n              self.$nextTick(function () {\n                self.uploading = false;\n                self.state.on_saving = false;\n                jQuery('#json_file').val('');\n                self.rebindSUI();\n              });\n            } else {\n              self.uploading = false;\n              self.state.on_saving = false;\n              jQuery('#json_file').val('');\n              Defender.showNotification('error', response.data.message);\n            }\n          }\n        });\n      }\n    },\n    file_changed: function file_changed(e) {\n      var file = this.$refs.file.files[0];\n      if (file.type === \"application/json\") {\n        this.uploading = true;\n        this.file_upload = file.name;\n        this.import_config();\n      } else {\n        Defender.showNotification('error', this.__('You uploaded an invalid file. Only JSON file types are allowed. Please try uploading again.'));\n      }\n    },\n    clear_file: function clear_file() {\n      this.can_upload = false;\n      this.file_upload = '';\n      jQuery('#json_file').val('');\n    }\n  },\n  computed: {\n    download_config_url: function download_config_url() {\n      return ajaxurl + '?action=' + this.endpoints['downloadConfig'] + '&_wpnonce=' + this.nonces['downloadConfig'] + '&key=' + this.current_config;\n    },\n    config: function config() {\n      return this.configs[this.current_config];\n    },\n    hub_text: function hub_text() {\n      return this.vsprintf(this.__('Did you know you can apply your configs to any connected website in <a href=\"%s\">The Hub</a>'), '');\n    },\n    apply_text: function apply_text() {\n      if (this.config !== undefined) return this.vsprintf(this.__('Are you sure you want to apply the <span class=\"text-gray-500 font-semibold\">%s</span> settings config to <span class=\"text-gray-500 font-semibold\">%s</span>? We recommend you have a backup available as your existing settings configuration will be overridden.'), this.config.name, this.siteUrl);\n    },\n    delete_text: function delete_text() {\n      if (this.config !== undefined) {\n        return this.vsprintf(this.__('Are you sure you want to delete the <span class=\"text-gray-500 font-semibold\">%s</span> config file? You will no longer be able to apply it to this or other connected sites.'), this.config.name);\n      }\n    }\n  },\n  mounted: function mounted() {\n    jQuery('body').on('click', '#open-uploader', function () {\n      jQuery('#json_file').trigger('click');\n    });\n    if (localStorage.is_shown) {\n      this.is_shown = localStorage.is_shown;\n    }\n  },\n\n  watch: {\n    is_shown: function is_shown(newValue) {\n      localStorage.is_shown = newValue;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8hLi9zcmMvbW9kdWxlL3NldHRpbmdzL3NjcmVlbi9jb25maWdzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vY29uZmlncy52dWU/NjkwMyJdLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJzdWktYm94XCIgaWQ9XCJjb25maWdzXCI+XG4gICAgPGRpdiBjbGFzcz1cInN1aS1ib3gtaGVhZGVyXCI+XG4gICAgICA8aDMgY2xhc3M9XCJzdWktYm94LXRpdGxlXCI+XG4gICAgICAgIHt7IF9fKFwiUHJlc2V0IENvbmZpZ3NcIikgfX1cbiAgICAgIDwvaDM+XG4gICAgICA8ZGl2IGNsYXNzPVwic3VpLWFjdGlvbnMtcmlnaHRcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgcmVmPVwiZmlsZVwiIEBjaGFuZ2U9XCJmaWxlX2NoYW5nZWRcIiBjbGFzcz1cImludmlzaWJsZVwiIGlkPVwianNvbl9maWxlXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic3VpLWJ1dHRvbiBzdWktYnV0dG9uLWdob3N0XCJcbiAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7J3N1aS1idXR0b24tb25sb2FkLXRleHQnOnVwbG9hZGluZ31cIlxuICAgICAgICAgICAgICAgIGlkPVwib3Blbi11cGxvYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInN1aS1idXR0b24tdGV4dC1kZWZhdWx0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cInN1aS1pY29uLXVwbG9hZC1jbG91ZFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4ge3sgX18oJ1VwbG9hZCcpIH19XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInN1aS1idXR0b24tdGV4dC1vbmxvYWRcIj5cblx0XHQgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJzdWktaWNvbi1sb2FkZXIgc3VpLWxvYWRpbmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG5cdFx0ICAgICAgICAgICAgICAgIHt7IF9fKCdJbXBvcnRpbmcuLi4nKSB9fVxuXHQgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3M9XCJzdWktYnV0dG9uIHN1aS1idXR0b24tYmx1ZVwiXG4gICAgICAgICAgICBkYXRhLW1vZGFsLW9wZW49XCJuZXctY29uZmlnXCJcbiAgICAgICAgICAgIGRhdGEtbW9kYWwtb3Blbi1mb2N1cz1cImNvbmZpZ3NcIlxuICAgICAgICAgICAgZGF0YS1tb2RhbC1jbG9zZS1mb2N1cz1cImNvbmZpZ3NcIlxuICAgICAgICAgICAgZGF0YS1tb2RhbC1tYXNrPVwiZmFsc2VcIlxuICAgICAgICAgICAgZGF0YS1lc2MtY2xvc2U9XCJ0cnVlXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxpIGNsYXNzPVwic3VpLWljb24tc2F2ZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4ge3sgX18oJ1NhdmUgbmV3JykgfX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwic3VpLWJveC1ib2R5IHN1aS11cHNlbGwtaXRlbXNcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJzdWktYm94LXNldHRpbmdzLXJvd1wiIDpjbGFzcz1cInsnbm8tcGFkZGluZy1ib3R0b20nOmlzX3Nob3duPT09J25vJyAmJiBpc1doaXRlbGFiZWxFbmFibGVkKCl9XCI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIHt7IF9fKCdDb25maWdzIGJ1bmRsZSB5b3VyIERlZmVuZGVyIHNldHRpbmdzIGFuZCBtYWtlIHRoZW0gYXZhaWxhYmxlIHRvIGRvd25sb2FkIGFuZCBhcHBseSBvbiB5b3VyIG90aGVyIHNpdGVzLicpIH19XG4gICAgICAgIDwvcD5cbiAgICAgIDwvZGl2PlxuICAgICAgPCEtLSAgICAgIENvbmZpZyBiZyAmIG5vdGljZS0tPlxuICAgICAgPGRpdiBjbGFzcz1cInN1aS1ib3gtc2V0dGluZ3Mtcm93IHN1aS11cHNlbGwtcm93XCIgdi1pZj1cImlzX3Nob3duID09PSAnbm8nXCI+XG4gICAgICAgICAgPGltZyAgdi1pZj1cIiFpc1doaXRlbGFiZWxFbmFibGVkKClcIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwic3VpLWltYWdlIHN1aS11cHNlbGwtaW1hZ2VcIlxuICAgICAgICAgICAgICAgOnNyYz1cImFzc2V0VXJsKCdhc3NldHMvaW1nL2F1ZGl0dGluZy1tYW4uc3ZnJylcIiBhbHQ9XCJcIj5cblxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWktbm90aWNlIHN1aS1ub3RpY2UtaW5mb1wiIDpjbGFzcz1cInsnZGVmZW5kZXItY29uZmlnLW5vdGljZS1pbmZvJzohaXNXaGl0ZWxhYmVsRW5hYmxlZCgpfVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN1aS1ub3RpY2UtY29udGVudFwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3VpLW5vdGljZS1tZXNzYWdlXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJzdWktbm90aWNlLWljb24gc3VpLWljb24taW5mbyBzdWktbWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICB7eyBfXyhcIlVzZSBjb25maWdzIHRvIHNhdmUgcHJlc2V0IGNvbmZpZ3VyYXRpb25zIG9mIERlZmVuZGVyJ3Mgc2V0dGluZ3MsIHRoZW4gdXBsb2FkIGFuZCBhcHBseSB0aGVtIHRvIHlvdXIgb3RoZXIgc2l0ZXMgaW4ganVzdCBhIGZldyBjbGlja3MhIFAuUy4gU2F2ZSBhcyBtYW55IG9mIHRoZW0gYXMgeW91IGxpa2UgLSB5b3UgY2FuIGhhdmUgdW5saW1pdGVkIHByZXNldCBjb25maWdzLlwiKSB9fVxuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWktbm90aWNlLWFjdGlvbnNcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic3VpLWJ1dHRvbi1pY29uXCIgQGNsaWNrPVwiaXNfc2hvd24gPSAneWVzJ1wiPlxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJzdWktaWNvbi1jaGVja1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3VpLXNjcmVlbi1yZWFkZXItdGV4dFwiPnt7X18oJ0Nsb3NlIHRoaXMgbm90aWNlJyl9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPCEtLSAgICAgIEVuZCBDb25maWcgYmcgJiBub3RpY2UtLT5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJzdWktYWNjb3JkaW9uIHN1aS1hY2NvcmRpb24tZmx1c2hlZFwiPlxuICAgICAgPGRpdlxuICAgICAgICAgIEBtb3VzZWVudGVyPVwiY3VycmVudF9jb25maWcgPSBrZXk7IG5ld19jb25maWdfbmFtZSA9IGNvbmZpZy5uYW1lOyBuZXdfY29uZmlnX2Rlc2NyaXB0aW9uID0gY29uZmlnLmRlc2NyaXB0aW9uXCJcbiAgICAgICAgICBjbGFzcz1cInN1aS1hY2NvcmRpb24taXRlbVwiXG4gICAgICAgICAgdi1mb3I9XCIoY29uZmlnLGtleSkgaW4gY29uZmlnc1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic3VpLWFjY29yZGlvbi1pdGVtLWhlYWRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWktYWNjb3JkaW9uLWl0ZW0tdGl0bGUgc3VpLWFjY29yZGlvbi1jb2wtM1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJkZWZlbmRlci1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJzdWktaWNvbi1kZWZlbmRlclwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIHYtdGV4dD1cImNvbmZpZy5uYW1lXCI+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gdi1pZj1cImNvbmZpZy5pbW1vcnRhbFwiIDpkYXRhLXRvb2x0aXA9XCJfXygnUmVjb21tZW5kZWQgY29uZmlnJylcIiBjbGFzcz1cIm1sLTAgc3VpLXRvb2x0aXBcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJzdWktaWNvbi1jaGVjay10aWNrXCI+PC9pPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWktYWNjb3JkaW9uLWNvbC02IGNvbmZpZy1kZXNjcmlwdGlvbiBmbGV4IGp1c3RpZnktYmV0d2VlblwiPlxuICAgICAgICAgICAge3sgX18oY29uZmlnLmRlc2NyaXB0aW9uKSB9fVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWktYWNjb3JkaW9uLWNvbC0zIGZsZXgganVzdGlmeS1lbmRcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3VpLXRhZyBzdWktdGFnLWJsdWUgc3VpLXRhZy1zbVwiIHYtaWY9XCJjb25maWcuaXNfYWN0aXZlPT09dHJ1ZVwiPnt7IF9fKCdBY3RpdmUnKSB9fTwvc3Bhbj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIHYtZWxzZVxuICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGFsLW9wZW49XCJhcHBseS1jb25maWdcIlxuICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGFsLW9wZW4tZm9jdXM9XCJjb25maWdzXCJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RhbC1jbG9zZS1mb2N1cz1cImNvbmZpZ3NcIlxuICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGFsLW1hc2s9XCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtZXNjLWNsb3NlPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwic3VpLWJ1dHRvbiBxdWljay1hcHBseSBzdWktYnV0dG9uLWdob3N0IHN1aS1hY2NvcmRpb24taXRlbS1hY3Rpb25cIj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJzdWktaWNvbi1jaGVja1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgICAge3sgX18oJ0FwcGx5JykgfX1cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN1aS1kcm9wZG93biBzdWktYWNjb3JkaW9uLWl0ZW0tYWN0aW9uXCI+XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzdWktYnV0dG9uLWljb24gc3VpLWRyb3Bkb3duLWFuY2hvclwiIGFyaWEtbGFiZWw9XCJEcm9wZG93blwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwic3VpLWljb24td2lkZ2V0LXNldHRpbmdzLWNvbmZpZ1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj1cIiNcIlxuICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGFsLW9wZW49XCJhcHBseS1jb25maWdcIlxuICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGFsLW9wZW4tZm9jdXM9XCJjb25maWdzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RhbC1jbG9zZS1mb2N1cz1cImNvbmZpZ3NcIlxuICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGFsLW1hc2s9XCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZXNjLWNsb3NlPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJzdWktaWNvbi1jaGVja1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4ge3sgX18oJ0FwcGx5JykgfX08L2E+PC9saT5cbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICA8YSA6aHJlZj1cImRvd25sb2FkX2NvbmZpZ191cmxcIj5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJzdWktaWNvbi1kb3dubG9hZFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4ge3sgX18oJ0Rvd25sb2FkJykgfX08L2E+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgdi1pZj1cImNvbmZpZy5pbW1vcnRhbCA9PT0gZmFsc2VcIj5cbiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJcIlxuICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RhbC1vcGVuPVwicmVuYW1lLWNvbmZpZ1wiXG4gICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGFsLW9wZW4tZm9jdXM9XCJjb25maWdzXCJcbiAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kYWwtY2xvc2UtZm9jdXM9XCJjb25maWdzXCJcbiAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kYWwtbWFzaz1cImZhbHNlXCJcbiAgICAgICAgICAgICAgICAgICAgIGRhdGEtZXNjLWNsb3NlPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwic3VpLWljb24tcGVuY2lsXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiB7eyBfXygnTmFtZSAmIERlc2NyaXB0aW9uJykgfX08L2E+PC9saT5cbiAgICAgICAgICAgICAgICA8bGkgdi1pZj1cImNvbmZpZy5pbW1vcnRhbCA9PT0gZmFsc2VcIj5cbiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJcIiBjbGFzcz1cInN1aS1vcHRpb24tcmVkXCJcbiAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kYWwtb3Blbj1cImRlbGV0ZS1jb25maWdcIlxuICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RhbC1vcGVuLWZvY3VzPVwiY29uZmlnc1wiXG4gICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGFsLWNsb3NlLWZvY3VzPVwiY29uZmlnc1wiXG4gICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGFsLW1hc2s9XCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgICAgICBkYXRhLWVzYy1jbG9zZT1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cInN1aS1pY29uLXRyYXNoXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiB7eyBfXygnRGVsZXRlJykgfX08L2E+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInN1aS1idXR0b24taWNvbiBzdWktYWNjb3JkaW9uLW9wZW4taW5kaWNhdG9yIHN1aS1uby1tYXJnaW4tbGVmdFwiIGFyaWEtbGFiZWw9XCJPcGVuIGl0ZW1cIj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJzdWktaWNvbi1jaGV2cm9uLWRvd25cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdWktYWNjb3JkaW9uLWl0ZW0tYm9keVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWktYm94XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3VpLWJveC1ib2R5IGNvbmZpZy1kZXRhaWxcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgganVzdGlmeS1iZXR3ZWVuIGFsaWduLW1pZGRsZVwiIHYtaWY9XCJjb25maWcuaW1tb3J0YWwgPT09IGZhbHNlXCI+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgIDxzdHJvbmcgdi10ZXh0PVwiY29uZmlnLm5hbWVcIj48L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwic3VpLWRlc2NyaXB0aW9uXCIgdi10ZXh0PVwiY29uZmlnLmRlc2NyaXB0aW9uXCI+PC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic3VpLWJ1dHRvbi1pY29uIHN1aS1idXR0b24tb3V0bGluZWQgc3VpLXRvb2x0aXBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1tb2RhbC1vcGVuPVwicmVuYW1lLWNvbmZpZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW1vZGFsLW9wZW4tZm9jdXM9XCJjb25maWdzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kYWwtY2xvc2UtZm9jdXM9XCJjb25maWdzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbW9kYWwtbWFzaz1cImZhbHNlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZXNjLWNsb3NlPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6ZGF0YS10b29sdGlwPVwiX18oJ0VkaXQgTmFtZSBhbmQgRGVzY3JpcHRpb24nKVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJzdWktaWNvbi1wZW5jaWxcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8aHIgdi1pZj1cImNvbmZpZy5pbW1vcnRhbCA9PT0gZmFsc2VcIi8+XG4gICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlLWZpeGVkIHctZnVsbFwiPlxuICAgICAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJweC00IHB5LTIgZm9udC1tZWRpdW1cIj57eyBfXygnU2VjdXJpdHkgUmVjb21tZW5kYXRpb25zJykgfX08L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwicHgtNCBweS0yIGZvbnQtbWVkaXVtXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgdi1mb3I9XCJpdGVtIGluIGNvbmZpZy5zdHJpbmdzLnNlY3VyaXR5X3R3ZWFrc1wiPlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtdGV4dD1cIml0ZW1cIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cIm9kZFwiPlxuICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwicHgtNCBweS0yIGZvbnQtbWVkaXVtXCI+e3sgX18oJ01hbHdhcmUgU2Nhbm5pbmcnKSB9fTwvdGQ+XG4gICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJweC00IHB5LTIgZm9udC1tZWRpdW1cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWZvcj1cIml0ZW0gaW4gY29uZmlnLnN0cmluZ3Muc2NhblwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaHRtbD1cIml0ZW1cIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cIlwiPlxuICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwicHgtNCBweS0yIGZvbnQtbWVkaXVtXCI+e3sgX18oJ0F1ZGl0IExvZ3MnKSB9fTwvdGQ+XG4gICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJweC00IHB5LTIgZm9udC1tZWRpdW1cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWZvcj1cIml0ZW0gaW4gY29uZmlnLnN0cmluZ3MuYXVkaXRcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWh0bWw9XCJpdGVtXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XCJvZGRcIj5cbiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cInB4LTQgcHktMiBmb250LW1lZGl1bVwiPnt7IF9fKCdGaXJld2FsbCcpIH19PC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cInB4LTQgcHktMiBmb250LW1lZGl1bVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtZm9yPVwiaXRlbSBpbiBjb25maWcuc3RyaW5ncy5pcGxvY2tvdXRcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWh0bWw9XCJpdGVtXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XCJcIj5cbiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cInB4LTQgcHktMiBmb250LW1lZGl1bVwiPnt7IF9fKCdUd28tRmFjdG9yIEF1dGhlbnRpY2F0aW9uJykgfX08L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwicHgtNCBweS0yIGZvbnQtbWVkaXVtXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgdi1mb3I9XCJpdGVtIGluIGNvbmZpZy5zdHJpbmdzLnR3b19mYWN0b3JcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LXRleHQ9XCJpdGVtXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XCJvZGRcIj5cbiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cInB4LTQgcHktMiBmb250LW1lZGl1bVwiPnt7IF9fKCdNYXNrIExvZ2luIEFyZWEnKSB9fTwvdGQ+XG4gICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJweC00IHB5LTIgZm9udC1tZWRpdW1cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWZvcj1cIml0ZW0gaW4gY29uZmlnLnN0cmluZ3MubWFza19sb2dpblwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtdGV4dD1cIml0ZW1cIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cInB4LTQgcHktMiBmb250LW1lZGl1bVwiPnt7IF9fKCdTZWN1cml0eSBIZWFkZXJzJykgfX08L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwicHgtNCBweS0yIGZvbnQtbWVkaXVtXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgdi1mb3I9XCJpdGVtIGluIGNvbmZpZy5zdHJpbmdzLnNlY3VyaXR5X2hlYWRlcnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LXRleHQ9XCJpdGVtXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPCEtLSAgICAgICAgPGRpdiBjbGFzcz1cInN1aS1ib3gtYm9keVwiPi0tPlxuICAgIDwhLS0gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3VpLWJveC1zZXR0aW5ncy1yb3cgc3VpLXVwc2VsbC1yb3dcIiB2LWlmPVwiaXNfZnJlZSA9PSB0cnVlXCI+LS0+XG4gICAgPCEtLSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3VpLXVwc2VsbC1ub3RpY2Ugbm8tcGFkZGluZ1wiPi0tPlxuICAgIDwhLS0gICAgICAgICAgICAgICAgICAgIDxwPnt7X18oJ1RpcmVkIG9mIHNhdmluZywgZG93bmxvYWRpbmcgYW5kIHVwbG9hZGluZyB5b3VyIGNvbmZpZ3MgYWNyb3NzIHlvdXIgc2l0ZXM/IFdQTVUgREVWIG1lbWJlcnMgdXNlIFRoZSBIdWIgdG8gZWFzaWx5IGFwcGx5IGNvbmZpZ3MgdG8gbXVsdGlwbGUgc2l0ZXMgYXQgb25jZS4uLiBUcnkgaXQgZnJlZSB0b2RheSEnKX19PGJyPi0tPlxuICAgIDwhLS0gICAgICAgICAgICAgICAgICAgIDxhIHRhcmdldD0nX2JsYW5rJy0tPlxuICAgIDwhLS0gICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwicHJlbWl1bS1idXR0b24gc3VpLWJ1dHRvbiBzdWktYnV0dG9uLXB1cnBsZVwiLS0+XG4gICAgPCEtLSAgICAgICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vcHJlbWl1bS53cG11ZGV2Lm9yZy9odWItd2VsY29tZS9cIj57e19fKFwiVHJ5IHRoZSBodWJcIil9fTwvYT4tLT5cbiAgICA8IS0tICAgICAgICAgICAgICAgICAgICA8L3A+LS0+XG4gICAgPCEtLSAgICAgICAgICAgICAgICA8L2Rpdj4tLT5cbiAgICA8IS0tICAgICAgICAgICAgPC9kaXY+LS0+XG4gICAgPCEtLSAgICAgICAgICAgIDxkaXYgdi1lbHNlPi0tPlxuICAgIDwhLS0gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJzdWktZGVzY3JpcHRpb24gdGV4dC1jZW50ZXJcIiB2LWh0bWw9XCJodWJfdGV4dFwiPjwvcD4tLT5cbiAgICA8IS0tICAgICAgICAgICAgPC9kaXY+LS0+XG4gICAgPCEtLSAgICAgICAgPC9kaXY+LS0+XG4gICAgPGRpdiBjbGFzcz1cInN1aS1tb2RhbCBzdWktbW9kYWwtc21cIj5cbiAgICAgIDxkaXZcbiAgICAgICAgICByb2xlPVwiZGlhbG9nXCJcbiAgICAgICAgICBpZD1cIm5ldy1jb25maWdcIlxuICAgICAgICAgIGNsYXNzPVwic3VpLW1vZGFsLWNvbnRlbnRcIlxuICAgICAgICAgIGFyaWEtbW9kYWw9XCJ0cnVlXCJcbiAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9XCJzYXZlLW5ldy1jb25maWdcIlxuICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJzYXZlLW5ldy1jb25maWdcIlxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic3VpLWJveFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWktYm94LWhlYWRlciBzdWktZmxhdHRlbiBzdWktY29udGVudC1jZW50ZXIgc3VpLXNwYWNpbmctdG9wLS02MFwiPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInN1aS1idXR0b24taWNvbiBzdWktYnV0dG9uLWZsb2F0LS1yaWdodFwiIGRhdGEtbW9kYWwtY2xvc2U9XCJcIj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJzdWktaWNvbi1jbG9zZSBzdWktbWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3VpLXNjcmVlbi1yZWFkZXItdGV4dFwiPnt7dGV4dENsb3NlfX08L3NwYW4+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxoMyBjbGFzcz1cInN1aS1ib3gtdGl0bGUgc3VpLWxnXCI+e3sgX18oJ1NhdmUgQ3VycmVudCBDb25maWcnKSB9fTwvaDM+XG4gICAgICAgICAgICA8cCBjbGFzcz1cInN1aS1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICB7eyBfXygnU2F2ZSB5b3VyIGN1cnJlbnQgRGVmZW5kZXIgc2V0dGluZ3MgY29uZmlndXJhdGlvbi4gWW914oCZbGwgYmUgYWJsZSB0byB0aGVuIGRvd25sb2FkIGFuZCBhcHBseSBpdCB0byB5b3VyIG90aGVyIHNpdGVzIHdpdGggRGVmZW5kZXIgaW5zdGFsbGVkLicpIH19XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInN1aS1ib3gtYm9keSBuby1wYWRkaW5nLWJvdHRvbVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN1aS1mb3JtLWZpZWxkXCI+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cInN1aS1sYWJlbFwiPnt7IF9fKCdDb25maWcgbmFtZScpIH19PC9sYWJlbD5cbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgdi1tb2RlbD1cImNvbmZpZ19uYW1lXCIgY2xhc3M9XCJzdWktZm9ybS1jb250cm9sXCI+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWktZm9ybS1maWVsZFwiPlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJzdWktbGFiZWxcIlxuICAgICAgICAgICAgICAgICAgICAgZm9yPVwic2F2ZV9jb25maWdfZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICAgICAgICAgaWQ9XCJsYWJlbF9zYXZlX2NvbmZpZ19kZXNjcmlwdGlvblwiPnt7X18oJ0NvbmZpZyBkZXNjcmlwdGlvbicpfX08L2xhYmVsPlxuICAgICAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJjb25maWdfZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICAgICAgaWQ9XCJzYXZlX2NvbmZpZ19kZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cInN1aS1mb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwibGFiZWxfc2F2ZV9jb25maWdfZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cInRleHRfc2F2ZV9jb25maWdfZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICA+PC90ZXh0YXJlYT5cbiAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJ0ZXh0X3NhdmVfY29uZmlnX2Rlc2NyaXB0aW9uXCIgY2xhc3M9XCJzdWktZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAgICB7e19fKCdZb3UgY2FuIGVkaXQgdGhlIGRlc2NyaXB0aW9uIHRvIGRpc3Rpbmd1aXNoIGZyb20gb3RoZXIgY29uZmlncy4gQ2hhbmdpbmcgdGhlIGRlc2NyaXB0aW9uIHdvbuKAmXQgZXhjbHVkZSB0aGUgZmVhdHVyZSBmcm9tIHRoZSBwcmVzZXQuJyl9fVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3VpLWJveC1mb290ZXIgc3VpLWNvbnRlbnQtcmlnaHQgbm8tYm9yZGVyXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic3VpLWJ1dHRvbiBzdWktYnV0dG9uLWdob3N0XCIgZGF0YS1tb2RhbC1jbG9zZT1cIlwiPlxuICAgICAgICAgICAgICB7e3RleHRDYW5jZWx9fVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8c3VibWl0LWJ1dHRvbiBAY2xpY2s9XCJuZXdfY29uZmlnXCIgOnN0YXRlPVwic3RhdGVcIiBjc3MtY2xhc3M9XCJzdWktYnV0dG9uIHN1aS1idXR0b24tYmx1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCIhY29uZmlnX25hbWUubGVuZ3RoXCI+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPVwic3VpLWljb24tc2F2ZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4ge3sgX18oJ1NhdmUnKSB9fVxuICAgICAgICAgICAgPC9zdWJtaXQtYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJzdWktbW9kYWwgc3VpLW1vZGFsLXNtXCI+XG4gICAgICA8ZGl2XG4gICAgICAgICAgcm9sZT1cImRpYWxvZ1wiXG4gICAgICAgICAgaWQ9XCJyZW5hbWUtY29uZmlnXCJcbiAgICAgICAgICBjbGFzcz1cInN1aS1tb2RhbC1jb250ZW50XCJcbiAgICAgICAgICBhcmlhLW1vZGFsPVwidHJ1ZVwiXG4gICAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwicmVuYW1lLWNvbmZpZ1wiXG4gICAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cInJlbmFtZS1jb25maWdcIlxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic3VpLWJveFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWktYm94LWhlYWRlciBzdWktZmxhdHRlbiBzdWktY29udGVudC1jZW50ZXIgc3VpLXNwYWNpbmctdG9wLS02MFwiPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInN1aS1idXR0b24taWNvbiBzdWktYnV0dG9uLWZsb2F0LS1yaWdodFwiIGRhdGEtbW9kYWwtY2xvc2U9XCJcIj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJzdWktaWNvbi1jbG9zZSBzdWktbWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3VpLXNjcmVlbi1yZWFkZXItdGV4dFwiPnt7dGV4dENsb3NlfX08L3NwYW4+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxoMyBjbGFzcz1cInN1aS1ib3gtdGl0bGUgc3VpLWxnXCI+e3sgX18oJ0VkaXQgTmFtZSAmIERlc2NyaXB0aW9uJykgfX08L2gzPlxuICAgICAgICAgICAgPHAgY2xhc3M9XCJzdWktZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAge3sgX18oJ0NoYW5nZSB5b3VyIGNvbmZpZyBuYW1lIGFuZCB5b3VyIGRlc2NyaXB0aW9uIHRvIHNvbWV0aGluZyByZWNvZ25pemFibGUuJykgfX1cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3VpLWJveC1ib2R5IG5vLXBhZGRpbmctYm90dG9tXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3VpLWZvcm0tZmllbGRcIj5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwic3VpLWxhYmVsXCI+e3sgX18oJ0NvbmZpZyBuYW1lJykgfX08L2xhYmVsPlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwibmV3X2NvbmZpZ19uYW1lXCIgY2xhc3M9XCJzdWktZm9ybS1jb250cm9sXCI+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWktZm9ybS1maWVsZFwiPlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJzdWktbGFiZWxcIj57eyBfXygnQ29uZmlnIGRlc2NyaXB0aW9uJykgfX08L2xhYmVsPlxuICAgICAgICAgICAgICA8dGV4dGFyZWEgdi1tb2RlbD1cIm5ld19jb25maWdfZGVzY3JpcHRpb25cIiBjbGFzcz1cInN1aS1mb3JtLWNvbnRyb2xcIj48L3RleHRhcmVhPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInN1aS1ib3gtZm9vdGVyIHN1aS1jb250ZW50LXJpZ2h0IG5vLWJvcmRlclwiPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInN1aS1idXR0b24gc3VpLWJ1dHRvbi1naG9zdFwiIGRhdGEtbW9kYWwtY2xvc2U9XCJcIj5cbiAgICAgICAgICAgICAge3t0ZXh0Q2FuY2VsfX1cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPHN1Ym1pdC1idXR0b24gQGNsaWNrPVwicmVuYW1lX2NvbmZpZ1wiIDpzdGF0ZT1cInN0YXRlXCIgY3NzLWNsYXNzPVwic3VpLWJ1dHRvbiBzdWktYnV0dG9uLWJsdWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgOmRpc2FibGVkPVwiIW5ld19jb25maWdfbmFtZS5sZW5ndGhcIj5cbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCJzdWktaWNvbi1zYXZlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiB7eyBfXygnU2F2ZScpIH19XG4gICAgICAgICAgICA8L3N1Ym1pdC1idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInN1aS1tb2RhbCBzdWktbW9kYWwtc21cIj5cbiAgICAgIDxkaXZcbiAgICAgICAgICByb2xlPVwiZGlhbG9nXCJcbiAgICAgICAgICBpZD1cImFwcGx5LWNvbmZpZ1wiXG4gICAgICAgICAgY2xhc3M9XCJzdWktbW9kYWwtY29udGVudFwiXG4gICAgICAgICAgYXJpYS1tb2RhbD1cInRydWVcIlxuICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT1cImFwcGx5LWNvbmZpZ1wiXG4gICAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cImFwcGx5LWNvbmZpZ1wiXG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdWktYm94XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInN1aS1ib3gtaGVhZGVyIHN1aS1mbGF0dGVuIHN1aS1jb250ZW50LWNlbnRlciBzdWktc3BhY2luZy10b3AtLTYwXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic3VpLWJ1dHRvbi1pY29uIHN1aS1idXR0b24tZmxvYXQtLXJpZ2h0XCIgZGF0YS1tb2RhbC1jbG9zZT1cIlwiPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cInN1aS1pY29uLWNsb3NlIHN1aS1tZFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzdWktc2NyZWVuLXJlYWRlci10ZXh0XCI+e3t0ZXh0Q2xvc2V9fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGgzIGNsYXNzPVwic3VpLWJveC10aXRsZSBzdWktbGdcIj57eyBfXygnQXBwbHkgY29uZmlnJykgfX08L2gzPlxuICAgICAgICAgICAgPHAgY2xhc3M9XCJzdWktZGVzY3JpcHRpb25cIiB2LWh0bWw9XCJhcHBseV90ZXh0XCI+XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInN1aS1ib3gtZm9vdGVyIHN1aS1mbGF0dGVuIHN1aS1jb250ZW50LWNlbnRlciBzdWktc3BhY2luZy1ib3R0b20tLTYwXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic3VpLWJ1dHRvbiBzdWktYnV0dG9uLWdob3N0XCIgZGF0YS1tb2RhbC1jbG9zZT1cIlwiPlxuICAgICAgICAgICAgICB7e3RleHRDYW5jZWx9fVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8c3VibWl0LWJ1dHRvbiBAY2xpY2s9XCJhcHBseV9jb25maWdcIiA6c3RhdGU9XCJzdGF0ZVwiIGNzcy1jbGFzcz1cInN1aS1idXR0b24gc3VpLWJ1dHRvbi1ibHVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD1cIiFuZXdfY29uZmlnX25hbWUubGVuZ3RoXCI+XG4gICAgICAgICAgICAgIDxpIGNsYXNzPVwic3VpLWljb24tY2hlY2tcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IHt7IF9fKCdBcHBseScpIH19XG4gICAgICAgICAgICA8L3N1Ym1pdC1idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInN1aS1tb2RhbCBzdWktbW9kYWwtc21cIj5cbiAgICAgIDxkaXZcbiAgICAgICAgICByb2xlPVwiZGlhbG9nXCJcbiAgICAgICAgICBpZD1cImRlbGV0ZS1jb25maWdcIlxuICAgICAgICAgIGNsYXNzPVwic3VpLW1vZGFsLWNvbnRlbnRcIlxuICAgICAgICAgIGFyaWEtbW9kYWw9XCJ0cnVlXCJcbiAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9XCJkZWxldGUtY29uZmlnXCJcbiAgICAgICAgICBhcmlhLWRlc2NyaWJlZGJ5PVwiZGVsZXRlLWNvbmZpZ1wiXG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdWktYm94XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInN1aS1ib3gtaGVhZGVyIHN1aS1mbGF0dGVuIHN1aS1jb250ZW50LWNlbnRlciBzdWktc3BhY2luZy10b3AtLTYwXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwic3VpLWJ1dHRvbi1pY29uIHN1aS1idXR0b24tZmxvYXQtLXJpZ2h0XCIgZGF0YS1tb2RhbC1jbG9zZT1cIlwiPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cInN1aS1pY29uLWNsb3NlIHN1aS1tZFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzdWktc2NyZWVuLXJlYWRlci10ZXh0XCI+e3t0ZXh0Q2xvc2V9fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGgzIGNsYXNzPVwic3VpLWJveC10aXRsZSBzdWktbGdcIj57eyBfXygnRGVsZXRlIENvbmZpZ3VyYXRpb24gRmlsZScpIH19PC9oMz5cbiAgICAgICAgICAgIDxwIGNsYXNzPVwic3VpLWRlc2NyaXB0aW9uXCIgdi1odG1sPVwiZGVsZXRlX3RleHRcIj5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3VpLWJveC1mb290ZXIgc3VpLWZsYXR0ZW4gc3VpLWNvbnRlbnQtY2VudGVyIHN1aS1zcGFjaW5nLWJvdHRvbS0tNjBcIj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzdWktYnV0dG9uIHN1aS1idXR0b24tZ2hvc3RcIiBkYXRhLW1vZGFsLWNsb3NlPVwiXCI+XG4gICAgICAgICAgICAgIHt7dGV4dENhbmNlbH19XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxzdWJtaXQtYnV0dG9uIGNzcy1jbGFzcz1cInN1aS1idXR0b24gc3VpLWJ1dHRvbi1yZWRcIiA6c3RhdGU9XCJzdGF0ZVwiIEBjbGljaz1cImRlbGV0ZV9jb25maWdcIj5cbiAgICAgICAgICAgICAge3sgX18oJ0RlbGV0ZScpIH19XG4gICAgICAgICAgICA8L3N1Ym1pdC1idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBiYXNlX2hlbHBlciBmcm9tICcuLi8uLi8uLi9oZWxwZXIvYmFzZV9oZXBsZXInO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG1peGluczogW2Jhc2VfaGVscGVyXSxcbiAgbmFtZTogXCJjb25maWdzXCIsXG4gIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNfZnJlZTogZGVmZW5kZXIuaXNfZnJlZSxcbiAgICAgIGVuZHBvaW50czogd2RTZXR0aW5ncy5lbmRwb2ludHMsXG4gICAgICBub25jZXM6IHdkU2V0dGluZ3Mubm9uY2VzLFxuICAgICAgY29uZmlnczogd2RTZXR0aW5ncy5jb25maWdzLFxuICAgICAgY29uZmlnX25hbWU6ICcnLFxuICAgICAgY29uZmlnX2Rlc2NyaXB0aW9uOiAnJyxcbiAgICAgIG5ld19jb25maWdfbmFtZTogJycsXG4gICAgICBuZXdfY29uZmlnX2Rlc2NyaXB0aW9uOiAnJyxcbiAgICAgIGN1cnJlbnRfY29uZmlnOiAnJyxcbiAgICAgIHVwbG9hZGluZzogZmFsc2UsXG4gICAgICBmaWxlX3VwbG9hZDogJycsXG4gICAgICBzdGF0ZToge1xuICAgICAgICBvbl9zYXZpbmc6IGZhbHNlXG4gICAgICB9LFxuICAgICAgaXNfc2hvd246ICdubycsXG4gICAgICB0ZXh0Q2FuY2VsOiAnJyxcbiAgICAgIHRleHRDbG9zZTogJydcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZWQoKSB7XG4gICAgdGhpcy50ZXh0Q2FuY2VsID0gdGhpcy5fXygnQ2FuY2VsJyk7XG4gICAgdGhpcy50ZXh0Q2xvc2UgPSB0aGlzLl9fKCdDbG9zZSB0aGlzIGRpYWxvZy4nKTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGFwcGx5X2NvbmZpZzogZnVuY3Rpb24gKCkge2NvbnNvbGUubG9nKCdhcHBseV9jb25maWcnKTtcbiAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgIHRoaXMuaHR0cFBvc3RSZXF1ZXN0KCdhcHBseUNvbmZpZycsIHtcbiAgICAgICAga2V5OiBzZWxmLmN1cnJlbnRfY29uZmlnXG4gICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MgPT09IHRydWUpIHtcbiAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5sb2dpbl91cmwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSByZXNwb25zZS5kYXRhLmxvZ2luX3VybDtcbiAgICAgICAgICAgIH0sIDIwMDApXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYuY29uZmlncyA9IHJlc3BvbnNlLmRhdGEuY29uZmlnc1xuICAgICAgICAgICAgc2VsZi4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICBzZWxmLnJlYmluZFNVSSgpO1xuICAgICAgICAgICAgICBzZWxmLmNvbmZpZ19uYW1lID0gJyc7XG4gICAgICAgICAgICAgIHNlbGYuY29uZmlnX2Rlc2NyaXB0aW9uID0gJyc7XG4gICAgICAgICAgICAgIFNVSS5jbG9zZU1vZGFsKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gICAgbmV3X2NvbmZpZzogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgdGhpcy5odHRwUG9zdFJlcXVlc3QoJ25ld0NvbmZpZycsIHtcbiAgICAgICAgbmFtZTogc2VsZi5jb25maWdfbmFtZSxcbiAgICAgICAgZGVzYzogc2VsZi5jb25maWdfZGVzY3JpcHRpb25cbiAgICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2VzcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHNlbGYuY29uZmlncyA9IHJlc3BvbnNlLmRhdGEuY29uZmlnc1xuICAgICAgICAgIHNlbGYuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIHNlbGYucmViaW5kU1VJKCk7XG4gICAgICAgICAgICBzZWxmLmNvbmZpZ19uYW1lID0gJyc7XG4gICAgICAgICAgICBzZWxmLmNvbmZpZ19kZXNjcmlwdGlvbiA9ICcnO1xuICAgICAgICAgICAgU1VJLmNsb3NlTW9kYWwoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICByZW5hbWVfY29uZmlnOiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICB0aGlzLmh0dHBQb3N0UmVxdWVzdCgndXBkYXRlQ29uZmlnJywge1xuICAgICAgICBrZXk6IHNlbGYuY3VycmVudF9jb25maWcsXG4gICAgICAgIG5hbWU6IHNlbGYubmV3X2NvbmZpZ19uYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbjogc2VsZi5uZXdfY29uZmlnX2Rlc2NyaXB0aW9uXG4gICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MgPT09IHRydWUpIHtcbiAgICAgICAgICBzZWxmLmNvbmZpZ3MgPSByZXNwb25zZS5kYXRhLmNvbmZpZ3NcbiAgICAgICAgICBzZWxmLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICBTVUkuY2xvc2VNb2RhbCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGRlbGV0ZV9jb25maWc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgIHRoaXMuaHR0cFBvc3RSZXF1ZXN0KCdkZWxldGVDb25maWcnLCB7XG4gICAgICAgIGtleTogc2VsZi5jdXJyZW50X2NvbmZpZ1xuICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzID09PSB0cnVlKSB7XG4gICAgICAgICAgc2VsZi5jb25maWdzID0gcmVzcG9uc2UuZGF0YS5jb25maWdzXG4gICAgICAgICAgc2VsZi4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgU1VJLmNsb3NlTW9kYWwoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBpbXBvcnRfY29uZmlnOiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgZmlsZSA9IHRoaXMuJHJlZnMuZmlsZS5maWxlc1swXVxuICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgaWYgKGZpbGUudHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcbiAgICAgICAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlKVxuICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgdXJsOiBhamF4dXJsICsgJz9hY3Rpb249JyArIHRoaXMuZW5kcG9pbnRzWydpbXBvcnRDb25maWcnXSArICcmX3dwbm9uY2U9JyArIHRoaXMubm9uY2VzWydpbXBvcnRDb25maWcnXSxcbiAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgICAgY29udGVudFR5cGU6IGZhbHNlLFxuICAgICAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZSxcbiAgICAgICAgICBiZWZvcmVTZW5kKGpxWEhSLCBzZXR0aW5ncykge1xuICAgICAgICAgICAgc2VsZi5zdGF0ZS5vbl9zYXZpbmcgPSB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2VzcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICBEZWZlbmRlci5zaG93Tm90aWZpY2F0aW9uKCdzdWNjZXNzJywgcmVzcG9uc2UuZGF0YS5tZXNzYWdlKVxuICAgICAgICAgICAgICBzZWxmLmNvbmZpZ3MgPSByZXNwb25zZS5kYXRhLmNvbmZpZ3NcbiAgICAgICAgICAgICAgc2VsZi4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGYudXBsb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc2VsZi5zdGF0ZS5vbl9zYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBqUXVlcnkoJyNqc29uX2ZpbGUnKS52YWwoJycpXG4gICAgICAgICAgICAgICAgc2VsZi5yZWJpbmRTVUkoKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlbGYudXBsb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgIHNlbGYuc3RhdGUub25fc2F2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgIGpRdWVyeSgnI2pzb25fZmlsZScpLnZhbCgnJylcbiAgICAgICAgICAgICAgRGVmZW5kZXIuc2hvd05vdGlmaWNhdGlvbignZXJyb3InLCByZXNwb25zZS5kYXRhLm1lc3NhZ2UpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgZmlsZV9jaGFuZ2VkOiBmdW5jdGlvbiAoZSkge1xuICAgICAgbGV0IGZpbGUgPSB0aGlzLiRyZWZzLmZpbGUuZmlsZXNbMF07XG4gICAgICBpZiAoZmlsZS50eXBlID09PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgICB0aGlzLnVwbG9hZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZmlsZV91cGxvYWQgPSBmaWxlLm5hbWU7XG4gICAgICAgIHRoaXMuaW1wb3J0X2NvbmZpZygpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBEZWZlbmRlci5zaG93Tm90aWZpY2F0aW9uKCdlcnJvcicsIHRoaXMuX18oJ1lvdSB1cGxvYWRlZCBhbiBpbnZhbGlkIGZpbGUuIE9ubHkgSlNPTiBmaWxlIHR5cGVzIGFyZSBhbGxvd2VkLiBQbGVhc2UgdHJ5IHVwbG9hZGluZyBhZ2Fpbi4nKSlcbiAgICAgIH1cbiAgICB9LFxuICAgIGNsZWFyX2ZpbGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY2FuX3VwbG9hZCA9IGZhbHNlO1xuICAgICAgdGhpcy5maWxlX3VwbG9hZCA9ICcnO1xuICAgICAgalF1ZXJ5KCcjanNvbl9maWxlJykudmFsKCcnKVxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBkb3dubG9hZF9jb25maWdfdXJsOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYWpheHVybCArICc/YWN0aW9uPScgKyB0aGlzLmVuZHBvaW50c1snZG93bmxvYWRDb25maWcnXSArICcmX3dwbm9uY2U9JyArIHRoaXMubm9uY2VzWydkb3dubG9hZENvbmZpZyddICsgJyZrZXk9JyArIHRoaXMuY3VycmVudF9jb25maWc7XG4gICAgfSxcbiAgICBjb25maWc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbmZpZ3NbdGhpcy5jdXJyZW50X2NvbmZpZ11cbiAgICB9LFxuICAgIGh1Yl90ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy52c3ByaW50Zih0aGlzLl9fKCdEaWQgeW91IGtub3cgeW91IGNhbiBhcHBseSB5b3VyIGNvbmZpZ3MgdG8gYW55IGNvbm5lY3RlZCB3ZWJzaXRlIGluIDxhIGhyZWY9XCIlc1wiPlRoZSBIdWI8L2E+JyksICcnKVxuICAgIH0sXG4gICAgYXBwbHlfdGV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuY29uZmlnICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzLnZzcHJpbnRmKHRoaXMuX18oJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBhcHBseSB0aGUgPHNwYW4gY2xhc3M9XCJ0ZXh0LWdyYXktNTAwIGZvbnQtc2VtaWJvbGRcIj4lczwvc3Bhbj4gc2V0dGluZ3MgY29uZmlnIHRvIDxzcGFuIGNsYXNzPVwidGV4dC1ncmF5LTUwMCBmb250LXNlbWlib2xkXCI+JXM8L3NwYW4+PyBXZSByZWNvbW1lbmQgeW91IGhhdmUgYSBiYWNrdXAgYXZhaWxhYmxlIGFzIHlvdXIgZXhpc3Rpbmcgc2V0dGluZ3MgY29uZmlndXJhdGlvbiB3aWxsIGJlIG92ZXJyaWRkZW4uJyksIHRoaXMuY29uZmlnLm5hbWUsIHRoaXMuc2l0ZVVybClcbiAgICB9LFxuICAgIGRlbGV0ZV90ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5jb25maWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy52c3ByaW50Zih0aGlzLl9fKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoZSA8c3BhbiBjbGFzcz1cInRleHQtZ3JheS01MDAgZm9udC1zZW1pYm9sZFwiPiVzPC9zcGFuPiBjb25maWcgZmlsZT8gWW91IHdpbGwgbm8gbG9uZ2VyIGJlIGFibGUgdG8gYXBwbHkgaXQgdG8gdGhpcyBvciBvdGhlciBjb25uZWN0ZWQgc2l0ZXMuJyksIHRoaXMuY29uZmlnLm5hbWUpXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIGpRdWVyeSgnYm9keScpLm9uKCdjbGljaycsICcjb3Blbi11cGxvYWRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGpRdWVyeSgnI2pzb25fZmlsZScpLnRyaWdnZXIoJ2NsaWNrJylcbiAgICB9KTtcbiAgICBpZiAobG9jYWxTdG9yYWdlLmlzX3Nob3duKSB7XG4gICAgICB0aGlzLmlzX3Nob3duID0gbG9jYWxTdG9yYWdlLmlzX3Nob3duXG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIGlzX3Nob3duOiBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5pc19zaG93biA9IG5ld1ZhbHVlO1xuICAgIH1cbiAgfVxufVxuPC9zY3JpcHQ+XG48c3R5bGUgc2NvcGVkPlxuI2NvbmZpZ3MgLnN1aS1hY2NvcmRpb24taXRlbS1oZWFkZXIgLnN1aS1idXR0b24ucXVpY2stYXBwbHkge1xuICBkaXNwbGF5OiBub25lO1xufVxuQG1lZGlhIChtaW4td2lkdGg6IDc2OXB4KSB7XG4gICNjb25maWdzIC5zdWktYWNjb3JkaW9uLWl0ZW0taGVhZGVyIC5jb25maWctZGVzY3JpcHRpb24ge1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIH1cbiAgI2NvbmZpZ3MgLnN1aS1hY2NvcmRpb24taXRlbS1oZWFkZXI6aG92ZXIgLnN1aS1idXR0b24ucXVpY2stYXBwbHkge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9XG59XG48L3N0eWxlPiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFqQkE7QUFtQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUExQkE7QUE0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXRIQTtBQXdIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFsQkE7QUFvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQWhMQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/module/settings/screen/configs.vue?vue&type=script&lang=js&\n");

/***/ })

})