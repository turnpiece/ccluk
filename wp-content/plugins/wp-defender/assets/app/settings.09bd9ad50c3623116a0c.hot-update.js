webpackHotUpdate("settings",{

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/module/settings/screen/configs.vue?vue&type=script&lang=js&":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/module/settings/screen/configs.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helper_base_hepler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../helper/base_hepler */ \"./src/helper/base_hepler.js\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  mixins: [_helper_base_hepler__WEBPACK_IMPORTED_MODULE_0__[\"default\"]],\n  name: \"configs\",\n  data: function data() {\n    return {\n      is_free: defender.is_free,\n      endpoints: wdSettings.endpoints,\n      nonces: wdSettings.nonces,\n      configs: wdSettings.configs,\n      config_name: '',\n      config_description: '',\n      new_config_name: '',\n      new_config_description: '',\n      current_config: '',\n      uploading: false,\n      file_upload: '',\n      state: {\n        on_saving: false\n      },\n      is_shown: 'no',\n      textCancel: '',\n      textClose: ''\n    };\n  },\n  created: function created() {\n    this.textCancel = this.__('Cancel');\n    this.textClose = this.__('Close this dialog.');\n  },\n\n  methods: {\n    apply_config: function apply_config() {\n      var self = this;\n      this.httpPostRequest('applyConfig', {\n        key: self.current_config\n      }, function (response) {\n        if (response.success === true) {\n          if (response.data.login_url !== undefined) {\n            setTimeout(function () {\n              location.href = response.data.login_url;\n            }, 2000);\n          } else {\n            self.configs = response.data.configs;\n            self.$nextTick(function () {\n              self.rebindSUI();\n              self.config_name = '';\n              self.config_description = '';\n              SUI.closeModal();\n            });\n          }\n        }\n      });\n    },\n    new_config: function new_config() {\n      var self = this;\n      this.httpPostRequest('newConfig', {\n        name: self.config_name,\n        desc: self.config_description\n      }, function (response) {\n        if (response.success === true) {\n          self.configs = response.data.configs;\n          self.$nextTick(function () {\n            self.rebindSUI();\n            self.config_name = '';\n            self.config_description = '';\n            SUI.closeModal();\n          });\n        } else {\n          SUI.closeModal();\n          console.log('111');\n          self.$nextTick(function () {\n            self.rebindSUI();\n            // self.config_name = '';\n            // self.config_description = '';\n            Defender.showNotification('error', response.data.message);\n          });\n        }\n      });\n    },\n    rename_config: function rename_config() {\n      var self = this;\n      this.httpPostRequest('updateConfig', {\n        key: self.current_config,\n        name: self.new_config_name,\n        description: self.new_config_description\n      }, function (response) {\n        if (response.success === true) {\n          self.configs = response.data.configs;\n          self.$nextTick(function () {\n            SUI.closeModal();\n          });\n        }\n      });\n    },\n    delete_config: function delete_config() {\n      var self = this;\n      this.httpPostRequest('deleteConfig', {\n        key: self.current_config\n      }, function (response) {\n        if (response.success === true) {\n          self.configs = response.data.configs;\n          self.$nextTick(function () {\n            SUI.closeModal();\n          });\n        }\n      });\n    },\n    import_config: function import_config() {\n      var file = this.$refs.file.files[0];\n      var self = this;\n      if (file.type === \"application/json\") {\n        var formData = new FormData();\n        formData.append('file', file);\n        jQuery.ajax({\n          url: ajaxurl + '?action=' + this.endpoints['importConfig'] + '&_wpnonce=' + this.nonces['importConfig'],\n          type: \"POST\",\n          data: formData,\n          cache: false,\n          contentType: false,\n          processData: false,\n          beforeSend: function beforeSend(jqXHR, settings) {\n            self.state.on_saving = true;\n          },\n\n          success: function success(response) {\n            if (response.success === true) {\n              Defender.showNotification('success', response.data.message);\n              self.configs = response.data.configs;\n              self.$nextTick(function () {\n                self.uploading = false;\n                self.state.on_saving = false;\n                jQuery('#json_file').val('');\n                self.rebindSUI();\n              });\n            } else {\n              self.uploading = false;\n              self.state.on_saving = false;\n              jQuery('#json_file').val('');\n              Defender.showNotification('error', response.data.message);\n            }\n          }\n        });\n      }\n    },\n    file_changed: function file_changed(e) {\n      var file = this.$refs.file.files[0];\n      if (file.type === \"application/json\") {\n        this.uploading = true;\n        this.file_upload = file.name;\n        this.import_config();\n      } else {\n        Defender.showNotification('error', this.__('You uploaded an invalid file. Only JSON file types are allowed. Please try uploading again.'));\n      }\n    },\n    clear_file: function clear_file() {\n      this.can_upload = false;\n      this.file_upload = '';\n      jQuery('#json_file').val('');\n    }\n  },\n  computed: {\n    download_config_url: function download_config_url() {\n      return ajaxurl + '?action=' + this.endpoints['downloadConfig'] + '&_wpnonce=' + this.nonces['downloadConfig'] + '&key=' + this.current_config;\n    },\n    config: function config() {\n      return this.configs[this.current_config];\n    },\n    hub_text: function hub_text() {\n      return this.vsprintf(this.__('Did you know you can apply your configs to any connected website in <a href=\"%s\">The Hub</a>'), '');\n    },\n    apply_text: function apply_text() {\n      if (this.config !== undefined) return this.vsprintf(this.__('Are you sure you want to apply the <span class=\"text-gray-500 font-semibold\">%s</span> settings config to <span class=\"text-gray-500 font-semibold\">%s</span>? We recommend you have a backup available as your existing settings configuration will be overridden.'), this.config.name, this.siteUrl);\n    },\n    delete_text: function delete_text() {\n      if (this.config !== undefined) {\n        return this.vsprintf(this.__('Are you sure you want to delete the <span class=\"text-gray-500 font-semibold\">%s</span> config file? You will no longer be able to apply it to this or other connected sites.'), this.config.name);\n      }\n    }\n  },\n  mounted: function mounted() {\n    jQuery('body').on('click', '#open-uploader', function () {\n      jQuery('#json_file').trigger('click');\n    });\n    if (localStorage.is_shown) {\n      this.is_shown = localStorage.is_shown;\n    }\n  },\n\n  watch: {\n    is_shown: function is_shown(newValue) {\n      localStorage.is_shown = newValue;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/module/settings/screen/configs.vue?vue&type=script&lang=js&\n");

/***/ })

})