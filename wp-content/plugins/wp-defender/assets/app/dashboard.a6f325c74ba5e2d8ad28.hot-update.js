webpackHotUpdate("dashboard",{

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/module/dashboard/component/preset-config.vue?vue&type=script&lang=js&":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/module/dashboard/component/preset-config.vue?vue&type=script&lang=js& ***!
  \*********************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helper_base_hepler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../helper/base_hepler */ \"./src/helper/base_hepler.js\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    name: \"preset-config\",\n    mixins: [_helper_base_hepler__WEBPACK_IMPORTED_MODULE_0__[\"default\"]],\n    data: function data() {\n        return {\n            endpoints: dashboard.settings.endpoints,\n            nonces: dashboard.settings.nonces,\n            configs: dashboard.settings.configs,\n            config_name: '',\n            config_description: '',\n            new_config_name: '',\n            new_config_description: '',\n            current_config: '',\n            state: {\n                on_saving: false\n            },\n            textCancel: '',\n            textClose: ''\n        };\n    },\n    created: function created() {\n        this.textCancel = this.__('Cancel');\n        this.textClose = this.__('Close this dialog.');\n    },\n    computed: {\n        download_config_url: function download_config_url() {\n            return ajaxurl + '?action=' + this.endpoints['downloadConfig'] + '&_wpnonce=' + this.nonces['downloadConfig'] + '&key=' + this.current_config;\n        },\n        config: function config() {\n            return this.configs[this.current_config];\n        },\n        hub_text: function hub_text() {\n            return this.vsprintf(this.__('Did you know you can apply your configs to any connected website in <a href=\"%s\">The Hub</a>'), 'https://premium.wpmudev.org/hub/');\n        },\n        apply_text: function apply_text() {\n            if (this.config !== undefined) return this.vsprintf(this.__('Are you sure you want to apply the <span class=\"text-gray-500 font-semibold\">%s</span> settings config to <span class=\"text-gray-500 font-semibold\">%s</span>? We recommend you have a backup available as your existing settings configuration will be overridden.'), this.config.name, this.siteUrl);\n        },\n        delete_text: function delete_text() {\n            if (this.config !== undefined) {\n                return this.vsprintf(this.__('Are you sure you want to delete the <span class=\"text-gray-500 font-semibold\">%s</span> config file? You will no longer be able to apply it to this or other connected sites.'), this.config.name);\n            }\n        },\n        count_configs: function count_configs() {\n            return Object.keys(this.configs).length > 0 ? Object.keys(this.configs).length : 0;\n        }\n    },\n    methods: {\n        apply_config: function apply_config() {\n            var self = this;\n            this.httpPostRequest('applyConfig', {\n                key: self.current_config,\n                screen: 'dashboard'\n            }, function (response) {\n                if (response.success === true) {\n                    if (response.data.login_url !== undefined) {\n                        setTimeout(function () {\n                            location.href = response.data.login_url;\n                        }, 2000);\n                    } else {\n                        self.configs = response.data.configs;\n                        self.$nextTick(function () {\n                            self.rebindSUI();\n                            self.config_name = '';\n                            self.config_description = '';\n                            SUI.closeModal();\n                        });\n                    }\n                }\n            });\n        },\n        new_config: function new_config() {\n            var self = this;\n            this.httpPostRequest('newConfig', {\n                name: self.config_name,\n                desc: self.config_description\n            }, function (response) {\n                if (response.success === true) {\n                    self.configs = response.data.configs;\n                    self.$nextTick(function () {\n                        self.config_name = '';\n                        self.config_description = '';\n                        SUI.closeModal();\n                    });\n                } else {\n                    SUI.closeModal();\n                    self.$nextTick(function () {\n                        self.rebindSUI();\n                    });\n                }\n            });\n        },\n        rename_config: function rename_config() {\n            var self = this;\n            this.httpPostRequest('updateConfig', {\n                key: self.current_config,\n                name: self.new_config_name,\n                description: self.new_config_description\n            }, function (response) {\n                if (response.success === true) {\n                    self.configs = response.data.configs;\n                    self.$nextTick(function () {\n                        SUI.closeModal();\n                    });\n                }\n            });\n        },\n        delete_config: function delete_config() {\n            var self = this;\n            this.httpPostRequest('deleteConfig', {\n                key: self.current_config\n            }, function (response) {\n                if (response.success === true) {\n                    self.configs = response.data.configs;\n                    self.$nextTick(function () {\n                        SUI.closeModal();\n                    });\n                }\n            });\n        }\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/module/dashboard/component/preset-config.vue?vue&type=script&lang=js&\n");

/***/ })

})